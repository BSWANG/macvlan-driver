package mocks

import datastore "github.com/docker/libnetwork/datastore"
import drivers "github.com/XiaoweiQian/macvlan-driver/drivers"
import mock "github.com/stretchr/testify/mock"

// MacStore is an autogenerated mock type for the MacStore type
type MacStore struct {
	mock.Mock
}

// InitStore provides a mock function with given fields: d
func (_m *MacStore) InitStore(d *drivers.Driver) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*drivers.Driver) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopulateEndpoints provides a mock function with given fields:
func (_m *MacStore) PopulateEndpoints() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreDelete provides a mock function with given fields: kvObject
func (_m *MacStore) StoreDelete(kvObject datastore.KVObject) error {
	ret := _m.Called(kvObject)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.KVObject) error); ok {
		r0 = rf(kvObject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreUpdate provides a mock function with given fields: kvObject
func (_m *MacStore) StoreUpdate(kvObject datastore.KVObject) error {
	ret := _m.Called(kvObject)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.KVObject) error); ok {
		r0 = rf(kvObject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
